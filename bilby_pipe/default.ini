## This file was written with bilby_pipe version 1.0.8

################################################################################
## Calibration arguments
# Which calibration model and settings to use.
################################################################################

# Choice of calibration model, if None, no calibration is used
calibration-model=None
# Dictionary pointing to the spline calibration envelope files
spline-calibration-envelope-dict=None
# Number of calibration nodes
spline-calibration-nodes=10
# Dictionary of the amplitude uncertainties for the constant uncertainty model
spline-calibration-amplitude-uncertainty-dict=None
# Dictionary of the phase uncertainties for the constant uncertainty model
spline-calibration-phase-uncertainty-dict=None
# Boundary methods for the calibration prior boundary
calibration-prior-boundary=reflective

################################################################################
## Data generation arguments
# How to generate the data, e.g., from a list of gps times or simulated Gaussian noise.
################################################################################

# Ignores the check to see if data queried from GWpy (ie not gaussian noise) is obtained from time when the IFOs are in science mode.
ignore-gwpy-data-quality-check=True
# Tuple of the (start, step, number) of GPS start times. For example, (10, 1, 3) produces the gps start times [10, 11, 12]. If given, gps-file is ignored.
gps-tuple=None
# File containing segment GPS start times. This can be a multi-column file if (a) it is comma-separated and (b) the zeroth column contains the gps-times to use
gps-file=None
# File containing detector timeslides. Requires a GPS time file to also be provided. One column for each detector. Order of detectors specified by `--detectors` argument. Number of timeslides must correspond to the number of GPS times provided.
timeslide-file=None
# Dictionary containing detector timeslides: applies a fixed offset per detector. E.g. to apply +1s in H1, {H1: 1}
timeslide-dict=None
# Either a GPS trigger time, or the event name (e.g. GW150914). For event names, the gwosc package is used to identify the trigger time
trigger-time=None
# Number of simulated segments to use with gaussian-noise Note, this must match the number of injections specified
n-simulation=0
# Dictionary of paths to gwf, or hdf5 data files
data-dict=None
# If given, the data format to pass to  `gwpy.timeseries.TimeSeries.read(), see  gwpy.github.io/docs/stable/timeseries/io.html
data-format=None
# If true (default), allow reading data from tape. See `gwpy.timeseries.TimeSeries.get() for more information.
allow-tape=True
# Channel dictionary: keys relate to the detector with values the channel name, e.g. 'GDS-CALIB_STRAIN'. For GWOSC open data, set the channel-dict keys to 'GWOSC'. Note, the dictionary should follow basic python dict syntax.
channel-dict=None
# If true, use simulated Gaussian noise
gaussian-noise=False
# Use a zero noise realisation
zero-noise=False

################################################################################
## Detector arguments
# How to set up the interferometers and power spectral density.
################################################################################

# Run the analysis for all detectors together and for each detector separately
coherence-test=False
# The names of detectors to use. If given in the ini file, detectors are specified by `detectors=[H1, L1]`. If given at the command line, as `--detectors H1 --detectors L1`
detectors=None
# The duration of data around the event to use
duration=4
# Random seed used during data generation. If no generation seed provided, a random seed between 1 and 1e6 is selected. If a seed is provided, it is used as the base seed and all generation jobs will have their seeds set as {generation_seed = base_seed + job_idx}.
generation-seed=None
# Dictionary of PSD files to use
psd-dict=None
# Fractional overlap of segments used in estimating the PSD
psd-fractional-overlap=0.5
# Time (in s) after the trigger_time to the end of the segment
post-trigger-duration=2.0
# None
sampling-frequency=4096
# Sets the psd duration (up to the psd-duration-maximum). PSD duration calculated by psd-length x duration [s]. Default is 32.
psd-length=32
# The maximum allowed PSD duration in seconds, default is 1024s.
psd-maximum-duration=1024
# PSD method see gwpy.timeseries.TimeSeries.psd for options
psd-method=median
# Start time of data (relative to the segment start) used to  generate the PSD. Defaults to psd-duration before the segment start time
psd-start-time=None
# The maximum frequency, given either as a float for all detectors or as a dictionary (see minimum-frequency)
maximum-frequency=None
# The minimum frequency, given either as a float for all detectors or as a dictionary where all keys relate the detector with values of the minimum frequency, e.g. {H1: 10, L1: 20}. If the waveform generation should start the minimum frequency for any of the detectors, add another entry to the dictionary, e.g., {H1: 40, L1: 60, waveform: 20}.
minimum-frequency=20
# Roll off duration of tukey window in seconds, default is 0.4s
tukey-roll-off=0.4
# Resampling method to use: lal matches the resampling used by lalinference/BayesWave
resampling-method=lal

################################################################################
## Injection arguments
# Whether to include software injections and how to generate them.
################################################################################

# Create data from an injection file
injection=False
# A single injection dictionary given in the ini file
injection-dict=None
# Injection file to use. See `bilby_pipe_create_injection_file --help` for supported formats
injection-file=None
# Specific injections rows to use from the injection_file, e.g. `injection_numbers=[0,3] selects the zeroth and third row. Can be a list of slice-syntax values, e.g, [0, 2:4] will produce [0, 2, 3]. Repeated entries will be ignored.
injection-numbers=None
# The name of the waveform approximant to use to create injections. If none is specified, then the `waveform-approximant` will be usedas the `injection-waveform-approximant`.
injection-waveform-approximant=None
# A dictionary of arbitrary additional waveform-arguments to pass to the bilby waveform generator's waveform arguments for the injection only
injection-waveform-arguments=None

################################################################################
## Job submission arguments
# How the jobs should be formatted, e.g., which job scheduler to use.
################################################################################

# Accounting group to use (see, https://accounting.ligo.org/user)
accounting=None
# Accounting group user to use (see, https://accounting.ligo.org/user)
accounting-user=None
# Output label
label=label
# Run the job locally, i.e., not through a batch submission
local=False
# Run the data generation job locally. This may be useful for running on a cluster where the compute nodes do not have internet access. For HTCondor, this is done using the local universe, for slurm, the jobs will be run at run-time
local-generation=False
# Run the plot job locally
local-plot=False
# The output directory. If outdir already exists, an auto-incrementing naming scheme is used
outdir=outdir
# If given, overwrite the outdir (if it exists)
overwrite-outdir=False
# Time after which the job will self-evict when scheduler=condor. After this, condor will restart the job. Default is 28800. This is used to decrease the chance of HTCondor hard evictions
periodic-restart-time=28800
# Disk allocation request in GB. Default is 5GB.
request-disk=5
# Memory allocation request (GB). Default is 8GB
request-memory=8.0
# Memory allocation request (GB) for data generation step
request-memory-generation=None
# Use multi-processing. This options sets the number of cores to request. To use a pool of 8 threads on an 8-core CPU, set request-cpus=8. For the dynesty, ptemcee, cpnest, and bilby_mcmc samplers, no additional sampler-kwargs are required
request-cpus=1
# Either a conda environment name of a absolute path to the conda env folder.
conda-env=None
# Format submission script for specified scheduler. Currently implemented: SLURM
scheduler=condor
# Space-separated #SBATCH command line args to pass to slurm. The args needed will depend on the setup of your slurm scheduler.Please consult documentation for your local cluster (slurm only).
scheduler-args=None
# Space-separated list of modules to load at runtime (slurm only)
scheduler-module=None
# Python environment to activate (slurm only)
scheduler-env=None
# 
scheduler-analysis-time=7-00:00:00
# Attempt to submit the job after the build
submit=False
# Job priorities allow a user to sort their HTCondor jobs to determine which are tried to be run first. A job priority can be any integer: larger values denote better priority. By default HTCondor job priority=0. 
condor-job-priority=0
# If true (default), use the HTCondor file transfer mechanism For non-condor schedulers, this option is ignored. Note: the log files are automatically synced, but to sync the  results during the run (e.g. to inspect progress), use the  executable bilby_pipe_htcondor_sync
transfer-files=True
# Additional files that should be transferred to the analysis jobs. The default is not transferring any additional files. Additional files can be specified as a list in the configuration file [a, b] or on the command line as --additional-transfer-paths a --additonal-transfer-paths b
additional-transfer-paths=None
# If given, an alternative path for the log output
log-directory=None
# If true, format condor submission for running on OSG, default is False
osg=False
# A comma-separated list of desired sites, wrapped in quoates. e.g., desired-sites='site1,site2'. This can be used on the OSG to specify specific run nodes.
desired-sites=None
# Path to an executable to replace bilby_pipe_analysis, be aware that this executable will pass the complete ini file (in the outdir.)
analysis-executable=None
# Python path to the analysis executable parser, used in conjunction with analysis-executable. Note, if this is not provided any new arguments to analysis-executable will raise a warning, but they will be passed to the executable directly.
analysis-executable-parser=None

################################################################################
## Likelihood arguments
# Options for setting up the likelihood.
################################################################################

# Boolean. If true, use a likelihood that is numerically marginalized over the calibration uncertainty as described in arXiv:2009.10193.
calibration-marginalization=False
# Boolean. If true, use a distance-marginalized likelihood
distance-marginalization=False
# Path to the distance-marginalization lookup table
distance-marginalization-lookup-table=None
# Boolean. If true, use a phase-marginalized likelihood
phase-marginalization=False
# Boolean. If true, use a time-marginalized likelihood
time-marginalization=False
# Boolean. If true, and using a time-marginalized likelihood 'time jittering' will be performed
jitter-time=True
# Reference frame for the sky parameterisation, either 'sky' (default) or, e.g., 'H1L1'
reference-frame=sky
# Time parameter to sample in, either 'geocent' (default) or, e.g., 'H1'
time-reference=geocent
# The likelihood. Can be one of [GravitationalWaveTransient, ROQGravitationalWaveTransient, zero] or python path to a bilby likelihood class available in the users installation. The --roq-folder or both --linear-matrix and --quadratic-matrix are required if the ROQ likelihood used. If both the options are specified, ROQ data are taken from roq-folder, and linear-matrix and quadratic-matrix are ignored.If `zero` is given, a testing ZeroLikelihood is used which alwaysreturn zero.
likelihood-type=GravitationalWaveTransient
# Dictionary of calibration lookup files for use with calibration marginalization/the precomputed model. If these files don't exist, they will be generated from the passed uncertainties.
calibration-lookup-table=None
# The data for ROQ
roq-folder=None
# Path to ROQ basis for linear inner products. This option is ignored if roq-folder is not None.
roq-linear-matrix=None
# Path to ROQ basis for quadratic inner products. This option is ignored if roq-folder is not None.
roq-quadratic-matrix=None
# If given, the ROQ weights to use (rather than building them). This must be given along with the roq-folder for checking
roq-weights=None
# File format of roq weights. This should be npz, hdf5, or json. If not specified, it is set to npz if basis file is specified through roq-folder, and hdf5 if through roq-linear-matrix and roq-quadratic-matrix
roq-weight-format=None
# Rescaling factor for the ROQ, default is 1 (no rescaling)
roq-scale-factor=1
# The reference parameters for the relative binning likelihod. If this is not specified, the value will be drawn from the prior.
fiducial-parameters=None
# Whether to update the fiducial parameters using an optimization algorithm. This is automatically set to True if --fiducial-parameters is None.
update-fiducial-parameters=False
# Epsilon value for the relative binning likelihood
epsilon=0.025
# Additional keyword arguments to pass to the likelihood. Any arguments which are named bilby_pipe arguments, e.g., distance_marginalization should NOT be included. This is only used if you are not using the GravitationalWaveTransient or ROQGravitationalWaveTransient likelihoods
extra-likelihood-kwargs=None

################################################################################
## Output arguments
# What kind of output/summary to generate.
################################################################################

# Create traceplots during the run
plot-trace=False
# Create plot of the frequency domain data
plot-data=False
# Create time-domain plot of the injection
plot-injection=False
# Create spectrogram plot
plot-spectrogram=False
# Create calibration posterior plot
plot-calibration=False
# Create intrinsic and extrinsic posterior corner plots
plot-corner=False
# Create 1-d marginal posterior plots
plot-marginal=False
# Create posterior skymap
plot-skymap=False
# Create waveform posterior plot
plot-waveform=False
# Format for making bilby_pipe plots, can be [png, pdf, html]. If specified format is not supported, will default to png.
plot-format=png
# Create a PESummary page
create-summary=False
# Email for notifications
email=None
# Notification setting for HTCondor jobs. One of 'Always','Complete','Error','Never'. If defined by 'Always', the owner will be notified whenever the job produces a checkpoint, as well as when the job completes. If defined by 'Complete', the owner will be notified when the job terminates. If defined by 'Error', the owner will only be notified if the job terminates abnormally, or if the job is placed on hold because of a failure, and not by user request. If defined by 'Never' (the default), the owner will not receive e-mail, regardless to what happens to the job. Note, an `email` arg is also required for notifications to be emailed. 
notification=Never
# Condor job queue. Use Online_PE for online parameter estimation runs.
queue=None
# If given, add results to an directory with an an existing summary.html file
existing-dir=None
# Directory to store summary pages. If not given, defaults to outdir/results_page
webdir=None
# Arguments (in the form of a dictionary) to pass to the summarypages executable
summarypages-arguments=None
# Format to save the result file in.
result-format=hdf5
# If true (default), generate a set of lightweight downsamples final results.
final-result=True
# Maximum number of samples to keep in the final results
final-result-nsamples=20000

################################################################################
## Prior arguments
# Specify the prior settings.
################################################################################

# The name of the prior set to base the prior on. Can be one of[PriorDict, BBHPriorDict, BNSPriorDict, CalibrationPriorDict]or a python path to a bilby prior class available in the user's installation.
default-prior=BBHPriorDict
# The symmetric width (in s) around the trigger time to search over the coalescence time
deltaT=0.2
# The prior file
prior-file=None
# A dictionary of priors (alternative to prior-file). Multiline dictionaries are supported, but each line must contain a singleparameter specification and finish with a comma.
prior-dict=None
# Whether to require that all signals fit within the segment duration. The signal duration is calculated using a post-Newtonian approximation.
enforce-signal-duration=True

################################################################################
## Post processing arguments
# What post-processing to perform.
################################################################################

# An executable name for postprocessing. A single postprocessing  job is run as a child of all analysis jobs
postprocessing-executable=None
# Arguments to pass to the postprocessing executable
postprocessing-arguments=None
# An executable name for postprocessing. A single postprocessing job is run as a child for each analysis jobs: note the difference with respect postprocessing-executable
single-postprocessing-executable=None
# Arguments to pass to the single postprocessing executable. The str '$RESULT' will be replaced by the path to the individual result file
single-postprocessing-arguments=None

################################################################################
## Sampler arguments
# None
################################################################################

# Sampler to use
sampler=dynesty
# Random sampling seed
sampling-seed=None
# Number of identical parallel jobs to run per event
n-parallel=1
# Dictionary of sampler-kwargs to pass in, e.g., {nlive: 1000} OR pass pre-defined set of sampler-kwargs {DynestyDefault, BilbyMCMCDefault, FastTest}
sampler-kwargs=DynestyDefault
# Configuration for reweighting the result. This can be specified as either a dictionary in the configuration file, or a json file.
reweighting-configuration=None
# Whether to reweight nested samples directly. Currently this only works with dynesty.
reweight-nested-samples=True

################################################################################
## Waveform arguments
# Setting for the waveform generator
################################################################################

# The waveform generator class, should be a python path. This will not be able to use any arguments not passed to the default.
waveform-generator=bilby.gw.waveform_generator.LALCBCWaveformGenerator
# The reference frequency
reference-frequency=20
# The name of the waveform approximant to use for PE.
waveform-approximant=IMRPhenomPv2
# Turns on waveform error catching
catch-waveform-errors=True
# Post-newtonian order to use for the spin
pn-spin-order=-1
# Post-Newtonian order to use for tides
pn-tidal-order=-1
# post-Newtonian order to use for the phase
pn-phase-order=-1
# Post-Newtonian order to use for the amplitude. Also used to determine the waveform starting frequency.
pn-amplitude-order=0
# Path to a h5 numerical relativity file to inject, seehttps://git.ligo.org/waveforms/lvcnr-lfs for examples
numerical-relativity-file=None
# A dictionary of arbitrary additional waveform-arguments to pass  to the bilby waveform generator's `waveform_arguments`
waveform-arguments-dict=None
# Array of modes to use for the waveform. Should be a list of lists, eg. [[2,2], [2,-2]]
mode-array=None
# Name of the frequency domain source model. Can be one of[lal_binary_black_hole, lal_binary_neutron_star,lal_eccentric_binary_black_hole_no_spins, sinegaussian, supernova, supernova_pca_model] or any python  path to a bilby  source function the users installation, e.g. examp.source.bbh
frequency-domain-source-model=lal_binary_black_hole
# Optional python path to a user-specified conversion function If unspecified, this is determined by the frequency_domain_source_model.If the source-model contains binary_black_hole, the conversion function is bilby.gw.conversion.convert_to_lal_binary_black_hole_parameters. If the source-model contains binary_neutron_star, the generation function is bilby.gw.conversion.convert_to_lal_binary_black_hole_parameters. If you specify your own function, you may wish to use the I/O of those functions as templates.If given as 'noconvert' (case insensitive), no conversion is used'
conversion-function=None
# Optional python path to a user-specified generation function If unspecified, this is determined by the frequency_domain_source_model.If the source-model contains binary_black_hole, the generation function is bilby.gw.conversion.generate_all_bbh_parameters. If the source-model contains binary_neutron_star, the generation function is bilby.gw.conversion.generate_all_bns_parameters. If you specify your own function, you may wish to use the I/O of those functions as templatesIf given as 'noconvert' (case insensitive), no generation is used'
generation-function=None

